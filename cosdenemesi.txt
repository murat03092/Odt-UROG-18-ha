#!/usr/bin/env python3


import asyncio
import time
import math
from mavsdk import System
from mavsdk.offboard import (OffboardError, VelocityBodyYawspeed, VelocityNedYaw)


async def run():
    """ Does Offboard control using velocity body coordinates. """

    drone = System()
    await drone.connect(system_address="udp://:14540")

    print("Waiting for drone to connect...")
    async for state in drone.core.connection_state():
        if state.is_connected:
            print(f"Drone discovered!")
            break

    print("-- Arming")
    await drone.action.arm()

    print("-- Taking off")
    await drone.action.takeoff()
    await asyncio.sleep(4)
    time.sleep(6)
    print("-- Setting initial setpoint")
    await drone.offboard.set_velocity_body(
        VelocityBodyYawspeed(0.0, 0.0, 0.0, 0.0))

    print("-- Starting offboard")
    try:
        await drone.offboard.start()
    except OffboardError as error:
        print(f"Starting offboard mode failed with error code: \
              {error._result.result}")
        print("-- Disarming")
        await drone.action.disarm()
        return
    a=0

    for a in range(14):
	
       
        print("serbest dolaşma fonksiyonu başladı")
        w=0.4*(math.cos(30*a*math.pi/180))
        x=round(w,2)
        y=0.04     
        #print(x,y)
	
        print("dongü srası:",a)
        await drone.offboard.set_velocity_body(VelocityBodyYawspeed(y, x, 0.0, 0.0))
        await asyncio.sleep(5)
        print("-- Wait for a bit")
        #await drone.offboard.set_velocity_body(
           #VelocityBodyYawspeed(0.0, 0.0, 0.0, 0.0))
        #await asyncio.sleep(2)
    	
        a=a+1
    print("-- Stopping offboard")
    try:
        await drone.offboard.stop()
    except OffboardError as error:
        print(f"Stopping offboard mode failed with error code: \
              {error._result.result}")
    print("-- Landing")
    await drone.action.land()




    	
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(run())
